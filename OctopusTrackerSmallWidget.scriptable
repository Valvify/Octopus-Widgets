{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-brown",
    "glyph" : "magic"
  },
  "name" : "OctopusTrackerSmallWidget",
  "script" : "\/\/ Scriptable Widget for Displaying Energy and Gas Tariff Information\n\/\/CS Feb 2024\nconst widget = new ListWidget(); \/\/ Initialize a new list widget\nwidget.backgroundColor = new Color(\"#100030\"); \/\/ Set the background color of the widget\n\nwidget.addSpacer(20); \/\/ Add space at the top\nconst header = widget.addText(\"Tracker Tarrif\"); \/\/ Add header text\nheader.font = Font.boldSystemFont(14); \/\/ Set the font and size of the header\nheader.textColor = Color.white(); \/\/ Set the color of the header text\nwidget.addSpacer(8); \/\/ Add space below the header\n\n\/\/ Function to fetch tariff data for electricity or gas\nasync function fetchTariffData(tariffType) {\n    const today = new Date(); \/\/ Get today's date\n    const tomorrow = new Date(today.getTime() + 86400000); \/\/ Calculate tomorrow's date\n    const baseUrl = `https:\/\/api.octopus.energy\/v1\/products\/SILVER-23-12-06\/`; \/\/ Base URL for the API\n    const productCode = \"SILVER-23-12-06\"; \/\/ Product code for the tariff\n    const regionCode = \"F\"; \/\/ Region code (CHANGE THIS as needed)\n    const tariffCode = `${tariffType[0].toUpperCase()}-1R-${productCode}-${regionCode}`; \/\/ Construct the tariff code\n    \/\/ Format today and tomorrow's dates as strings\n    const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;\n    const tomorrowStr = `${tomorrow.getFullYear()}-${String(tomorrow.getMonth() + 1).padStart(2, '0')}-${String(tomorrow.getDate()).padStart(2, '0')}`;\n    \/\/ Construct URLs for today and tomorrow's tariff data\n    const urlToday = `${baseUrl}${tariffType}-tariffs\/${tariffCode}\/standard-unit-rates\/?period_from=${todayStr}T00:00:00Z&period_to=${todayStr}T23:59:59Z`;\n    const urlTomorrow = `${baseUrl}${tariffType}-tariffs\/${tariffCode}\/standard-unit-rates\/?period_from=${tomorrowStr}T00:00:00Z&period_to=${tomorrowStr}T23:59:59Z`;\n\n    let dataToday, dataTomorrow;\n    try {\n        \/\/ Fetch and process today's tariff data\n        let responseToday = await new Request(urlToday).loadJSON();\n        dataToday = responseToday.results[0]?.value_inc_vat.toFixed(2);\n        \/\/ Fetch and process tomorrow's tariff data\n        let responseTomorrow = await new Request(urlTomorrow).loadJSON();\n        dataTomorrow = responseTomorrow.results[0]?.value_inc_vat.toFixed(2);\n    } catch (error) {\n        \/\/ Handle errors by setting data to \"N\/A\"\n        console.error(`Error fetching tariff data: ${error}`);\n        dataToday = \"N\/A\";\n        dataTomorrow = \"N\/A\";\n    }\n\n    return { today: dataToday, tomorrow: dataTomorrow }; \/\/ Return today and tomorrow's data\n}\n\n\/\/ Function to display the tariff data on the widget\nasync function displayTariffData(tariffType, symbolName) {\n    const data = await fetchTariffData(tariffType); \/\/ Fetch the tariff data\n    let row = widget.addStack(); \/\/ Create a new row in the widget\n    row.centerAlignContent(); \/\/ Center-align the content in the row\n\n    const symbol = SFSymbol.named(symbolName); \/\/ Get the SF Symbol for the tariff type\n    symbol.applyMediumWeight(); \/\/ Apply medium weight to the symbol for better visibility\n    const img = row.addImage(symbol.image); \/\/ Add the symbol image to the row\n    img.tintColor = Color.white(); \/\/ Set the symbol's color to white\n    img.imageSize = new Size(30, 30); \/\/ Set the size of the symbol image\n    img.resizable = true; \/\/ Allow the symbol image to be resizable\n    row.addSpacer(8); \/\/ Add space after the symbol\n\n    \/\/ Display today's price in a large font\n    let priceElement = row.addText(`${data.today}p`);\n    priceElement.font = Font.boldSystemFont(26);\n    priceElement.textColor = Color.white();\n\n    widget.addSpacer(4); \/\/ Add space below today's price\n\n    let subText, subElement;\n    \/\/ Check if tomorrow's price is available and not \"N\/A\"\n    if (data.tomorrow && data.tomorrow !== \"N\/A\") {\n        let change = data.today && data.today !== \"N\/A\" ? ((parseFloat(data.tomorrow) - parseFloat(data.today)) \/ parseFloat(data.today)) * 100 : 0;\n        \/\/ Determine the arrow direction based on price change\n        let arrow = change > 0 ? \"↑\" : (change < 0 ? \"↓\" : \"\"); \/\/ Add an arrow for increase or decrease\n        subText = `Tomorrow: ${data.tomorrow}p ${arrow}`;\n        subElement = widget.addText(subText);\n        \/\/ Color the text based on price change direction\n        subElement.textColor = change > 0 ? new Color(\"#FF3B30\") : (change < 0 ? new Color(\"#30D158\") : Color.white());\n        subElement.font = Font.systemFont(12);\n    } else {\n        \/\/ Display \"Coming Soon\" if tomorrow's price is not available\n        subText = `Tomorrow: Coming Soon`;\n        subElement = widget.addText(subText);\n        subElement.textColor = Color.white();\n        subElement.font = Font.systemFont(10);\n    }\n\n    widget.addSpacer(20); \/\/ Add final spacer for layout\n}\n\n\/\/ Display tariff information for electricity and gas\nawait displayTariffData(\"electricity\", \"bolt.fill\");\nawait displayTariffData(\"gas\", \"flame.fill\");\n\n\/\/ Optional: Set the widget's URL to open a specific app or webpage\nwidget.url = \"https:\/\/octopustracker.small3y.co.uk\";\n\n\/\/ Preview the widget in the app if not running in a widget context\nif (!config.runsInWidget) {\n    await widget.presentMedium();\n}\n\nScript.setWidget(widget); \/\/ Set the widget for display\nScript.complete(); \/\/ Signal that the script has completed execution",
  "share_sheet_inputs" : [

  ]
}